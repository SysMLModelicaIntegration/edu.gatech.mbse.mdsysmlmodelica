/*
 * This file is part of OpenModelica.
 *
 * Copyright (c) 1998-CurrentYear, Open Source Modelica Consortium (OSMC),
 * c/o Linköpings universitet, Department of Computer and Information Science,
 * SE-58183 Linköping, Sweden.
 *
 * All rights reserved.
 *
 * THIS PROGRAM IS PROVIDED UNDER THE TERMS OF GPL VERSION 3 LICENSE OR 
 * THIS OSMC PUBLIC LICENSE (OSMC-PL). 
 * ANY USE, REPRODUCTION OR DISTRIBUTION OF THIS PROGRAM CONSTITUTES RECIPIENT'S ACCEPTANCE
 * OF THE OSMC PUBLIC LICENSE OR THE GPL VERSION 3, ACCORDING TO RECIPIENTS CHOICE. 
 *
 * The OpenModelica software and the Open Source Modelica
 * Consortium (OSMC) Public License (OSMC-PL) are obtained
 * from OSMC, either from the above address,
 * from the URLs: http://www.ida.liu.se/projects/OpenModelica or  
 * http://www.openmodelica.org, and in the OpenModelica distribution. 
 * GNU version 3 is obtained from: http://www.gnu.org/copyleft/gpl.html.
 *
 * This program is distributed WITHOUT ANY WARRANTY; without
 * even the implied warranty of  MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE, EXCEPT AS EXPRESSLY SET FORTH
 * IN THE BY RECIPIENT SELECTED SUBSIDIARY LICENSE CONDITIONS OF OSMC-PL.
 *
 * See the full OSMC Public License conditions for more details.
 *
 * Main author: Wladimir Schamai, EADS Innovation Works / Linköping University, 2009-now
 *
 * Contributors: 
 *   Uwe Pohlmann, University of Paderborn 2009-2010, contribution to the Modelica code generation for state machine behavior, contribution to Papyrus GUI adoptations
 *   Parham Vasaiely, EADS Innovation Works / Hamburg University of Applied Sciences 2009-2011, implementation of simulation plugins
 */
package org.openmodelica.modelicaml.modelica.importer.omc.corba;



// TODO: Auto-generated Javadoc
/**
* OmcCommunicationHelper.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from omc_communication.idl
* Thursday, October 27, 2005 10:11:20 AM CEST
*/


// As simple as can be omc communication, sending and recieving of strings.
abstract public class OmcCommunicationHelper
{
  
  /** The _id. */
  private static String  _id = "IDL:OmcCommunication:1.0";

  /**
   * Insert.
   *
   * @param a the a
   * @param that the that
   */
  public static void insert (org.omg.CORBA.Any a, OmcCommunication that)
  {
    org.omg.CORBA.portable.OutputStream out = a.create_output_stream ();
    a.type (type ());
    write (out, that);
    a.read_value (out.create_input_stream (), type ());
  }

  /**
   * Extract.
   *
   * @param a the a
   * @return the omc communication
   */
  public static OmcCommunication extract (org.omg.CORBA.Any a)
  {
    return read (a.create_input_stream ());
  }

  /** The __type code. */
  private static org.omg.CORBA.TypeCode __typeCode = null;
  
  /**
   * Type.
   *
   * @return the org.omg. corb a. type code
   */
  synchronized public static org.omg.CORBA.TypeCode type ()
  {
    if (__typeCode == null)
    {
      __typeCode = org.omg.CORBA.ORB.init ().create_interface_tc (OmcCommunicationHelper.id (), "OmcCommunication");
    }
    return __typeCode;
  }

  /**
   * Id.
   *
   * @return the string
   */
  public static String id ()
  {
    return _id;
  }

  /**
   * Read.
   *
   * @param istream the istream
   * @return the omc communication
   */
  public static OmcCommunication read (org.omg.CORBA.portable.InputStream istream)
  {
    return narrow (istream.read_Object (_OmcCommunicationStub.class));
  }

  /**
   * Write.
   *
   * @param ostream the ostream
   * @param value the value
   */
  public static void write (org.omg.CORBA.portable.OutputStream ostream, OmcCommunication value)
  {
    ostream.write_Object ((org.omg.CORBA.Object) value);
  }

  /**
   * Narrow.
   *
   * @param obj the obj
   * @return the omc communication
   */
  public static OmcCommunication narrow (org.omg.CORBA.Object obj)
  {
    if (obj == null)
      return null;
    else if (obj instanceof OmcCommunication)
      return (OmcCommunication)obj;
    else if (!obj._is_a (id ()))
      throw new org.omg.CORBA.BAD_PARAM ();
    else
    {
      org.omg.CORBA.portable.Delegate delegate = ((org.omg.CORBA.portable.ObjectImpl)obj)._get_delegate ();
      _OmcCommunicationStub stub = new _OmcCommunicationStub ();
      stub._set_delegate(delegate);
      return stub;
    }
  }

  /**
   * Unchecked_narrow.
   *
   * @param obj the obj
   * @return the omc communication
   */
  public static OmcCommunication unchecked_narrow (org.omg.CORBA.Object obj)
  {
    if (obj == null)
      return null;
    else if (obj instanceof OmcCommunication)
      return (OmcCommunication)obj;
    else
    {
      org.omg.CORBA.portable.Delegate delegate = ((org.omg.CORBA.portable.ObjectImpl)obj)._get_delegate ();
      _OmcCommunicationStub stub = new _OmcCommunicationStub ();
      stub._set_delegate(delegate);
      return stub;
    }
  }

}
